import React, {useState, useEffect} from 'react';
import {ExtensionPoint, TextField, Text, Stack, Checkbox} from '@shopify/argo';
import {render, useData, useContainer} from '@shopify/argo/react';

function Add() {
  const [selectedPlans, setSelectedPlans] = useState<string[]>([]);
  const data = useData<ExtensionPoint.SubscriptionManagementAdd>();
  const {close, done, setPrimaryAction, setSecondaryAction} = useContainer();
  const mockPlans = [
    {name: 'Subscription Plan A', id: 'a'},
    {name: 'Subscription Plan B', id: 'b'},
    {name: 'Subscription Plan C', id: 'c'},
  ];

  useEffect(() => {
    setPrimaryAction({
      content: 'Add to plan',
      onAction: () => {
        done();
        close();
      },
    });

    setSecondaryAction({
      content: 'Cancel',
      onAction: () => close(),
    });
  }, []);

  return (
    <>
      <Text>
        Add {`{Product id ${data.productId}}`} to an existing plan or existing
        plans
      </Text>

      <Stack>
        {mockPlans.map((plan) => (
          <Checkbox
            key={plan.id}
            label={plan.name}
            onChange={(checked) => {
              const plans = checked
                ? selectedPlans.concat(plan.id)
                : selectedPlans.filter((id) => id !== plan.id);
              setSelectedPlans(plans);
            }}
            checked={selectedPlans.includes(plan.id)}
          />
        ))}
      </Stack>
    </>
  );
}

function Create() {
  const data = useData<ExtensionPoint.SubscriptionManagementCreate>();
  const [planTitle, setPlanTitle] = useState('');
  const [percentageOff, setPercentageOff] = useState('');
  const [deliveryFrequency, setDeliveryFrequency] = useState('');
  const {close, done, setPrimaryAction, setSecondaryAction} = useContainer();

  useEffect(() => {
    setPrimaryAction({
      content: 'Create plan',
      onAction: () => {
        done();
        close();
      },
    });
  
    setSecondaryAction({
      content: 'Cancel',
      onAction: () => close(),
    });
  }, []);

  return (
    <Stack vertical>
      <Text>
        Create subscription plan for {`{Product id ${data.productId}}`}
      </Text>

      <TextField
        label="Plan title"
        value={planTitle}
        onAfterChange={setPlanTitle}
      />

      <Stack>
        <TextField
          type="number"
          label="Delivery frequency (in weeks)"
          value={deliveryFrequency}
          onAfterChange={setDeliveryFrequency}
        />
        <TextField
          type="number"
          label="Percentage off (%)"
          value={percentageOff}
          onAfterChange={setPercentageOff}
        />
      </Stack>
    </Stack>
  );
}

function Remove() {
  const data = useData<ExtensionPoint.SubscriptionManagementRemove>();
  const {close, done, setPrimaryAction, setSecondaryAction} = useContainer();

  useEffect(() => {
    setPrimaryAction({
      content: 'Remove from plan',
      onAction: () => {
        done();
        close();
      },
    });

    setSecondaryAction({
      content: 'Cancel',
      onAction: () => close(),
    });
  }, []);

  return (
    <Text>
      Remove {`{Product id ${data.productId}}`} from{' '}
      {`{Plan group id ${data.sellingPlanGroupId}}`}
    </Text>
  );
}

function Edit() {
  const data = useData<ExtensionPoint.SubscriptionManagementEdit>();
  const [planTitle, setPlanTitle] = useState('Current plan');
  const [percentageOff, setPercentageOff] = useState('10');
  const [deliveryFrequency, setDeliveryFrequency] = useState('1');
  const {close, done, setPrimaryAction, setSecondaryAction} = useContainer();

  useEffect(() => {
    setPrimaryAction({
      content: 'Edit plan',
      onAction: () => {
        done();
        close();
      },
    });

    setSecondaryAction({
      content: 'Cancel',
      onAction: () => close(),
    });
  }, []);

  return (
    <Stack vertical>
      <Text>Edit subscription plan for {`{Product id ${data.productId}}`}</Text>

      <TextField
        label="Plan title"
        value={planTitle}
        onAfterChange={setPlanTitle}
      />

      <Stack>
        <TextField
          type="number"
          label="Delivery frequency (in weeks)"
          value={deliveryFrequency}
          onAfterChange={setDeliveryFrequency}
        />
        <TextField
          type="number"
          label="Percentage off (%)"
          value={percentageOff}
          onAfterChange={setPercentageOff}
        />
      </Stack>
    </Stack>
  );
}

render(ExtensionPoint.SubscriptionManagementAdd, () => <Add />);
render(ExtensionPoint.SubscriptionManagementCreate, () => <Create />);
render(ExtensionPoint.SubscriptionManagementRemove, () => <Remove />);
render(ExtensionPoint.SubscriptionManagementEdit, () => <Edit />);
