import {
  ExtensionPoint,
  TextField,
  Text,
  Stack,
  Checkbox,
  render,
} from '@shopify/argo-admin';

function Add(root, api) {
  const data = api.data;
  const sessionToken = api.sessionToken;
  const {close, done, setPrimaryAction, setSecondaryAction} = api.container;
  const mockPlans = [
    {name: 'Subscription Plan A', id: 'a'},
    {name: 'Subscription Plan B', id: 'b'},
    {name: 'Subscription Plan C', id: 'c'},
  ];

  setPrimaryAction({
    content: 'Add to plan',
    onAction: async () => {
      const token = await sessionToken.getSessionToken();
      /*
        This is where you will need to submit the form data to your app server to add the new plan.
        You'll need to use the `token` value to authenticate this request on your app server.
        Upon completion, call done() to trigger a reload of the resource page and close() to close the modal.
      */
      done();
      close();
    },
  });

  setSecondaryAction({
    content: 'Cancel',
    onAction: () => close(),
  });

  const textElement = root.createComponent(Text);
  textElement.appendChild(
    root.createText(
      `Add {Product id ${data.productId}} to an existing plan or existing plans`
    )
  );
  root.appendChild(textElement);

  const stack = root.createComponent(Stack);

  mockPlans.forEach((plan) => {
    const checkbox = root.createComponent(Checkbox, {
      label: plan.name,
      checked: false,
      onChange: (checked) => {
        checkbox.updateProps({
          checked,
        });
      },
    });

    stack.appendChild(checkbox);
  });

  root.appendChild(stack);

  root.mount();
}

function Create(root, api) {
  const data = api.data;
  const sessionToken = api.sessionToken;
  const {close, done, setPrimaryAction, setSecondaryAction} = api.container;

  setPrimaryAction({
    content: 'Create plan',
    onAction: async () => {
      const token = await sessionToken.getSessionToken();
      /*
        This is where you will need to submit the form data to your app server to create a new plan.
        You'll need to use the `token` value to authenticate this request on your app server.
        Upon completion, call done() to trigger a reload of the resource page and close() to close the modal.
      */
      done();
      close();
    },
  });

  setSecondaryAction({
    content: 'Cancel',
    onAction: () => close(),
  });

  const rootStack = root.createComponent(Stack, {vertical: true});
  root.appendChild(rootStack);

  const textElement = root.createComponent(Text);
  textElement.appendChild(
    root.createText(
      `Create subscription plan for {Product id ${data.productId}}`
    )
  );
  rootStack.appendChild(textElement);

  const planTitleField = root.createComponent(TextField, {
    label: 'Plan title',
    value: '',
    onAfterChange(value) {
      planTitleField.updateProps({
        value,
      });
    },
  });
  rootStack.appendChild(planTitleField);

  const stack = root.createComponent(Stack);
  rootStack.appendChild(stack);

  const deliveryFrequencyField = root.createComponent(TextField, {
    type: 'number',
    label: 'Delivery frequency (in weeks)',
    value: undefined,
    onAfterChange(value) {
      deliveryFrequencyField.updateProps({
        value,
      });
    },
  });
  stack.appendChild(deliveryFrequencyField);

  const percentageOffField = root.createComponent(TextField, {
    type: 'number',
    label: 'Percentage off (%)',
    value: undefined,
    onAfterChange(value) {
      percentageOffField.updateProps({
        value,
      });
    },
  });
  stack.appendChild(percentageOffField);

  root.mount();
}

function Remove(root, api) {
  const data = api.data;
  const sessionToken = api.sessionToken;
  const {close, done, setPrimaryAction, setSecondaryAction} = api.container;

  setPrimaryAction({
    content: 'Remove from plan',
    onAction: async () => {
      const token = await sessionToken.getSessionToken();
      /*
        This is where you will need to submit the form data to your app server to remove the plan.
        You'll need to use the `token` value to authenticate this request on your app server.
        Upon completion, call done() to trigger a reload of the resource page and close() to close the modal.
      */
      done();
      close();
    },
  });

  setSecondaryAction({
    content: 'Cancel',
    onAction: () => close(),
  });

  const textElement = root.createComponent(Text);
  textElement.appendChild(
    root.createText(
      `Remove {Product id ${data.productId}} from {Plan group id ${data.sellingPlanGroupId}}`
    )
  );

  root.appendChild(textElement);
  root.mount();
}

function Edit(root, api) {
  const data = api.data;
  const sessionToken = api.sessionToken;
  const {close, done, setPrimaryAction, setSecondaryAction} = api.container;

  setPrimaryAction({
    content: 'Edit plan',
    onAction: async () => {
      const token = await sessionToken.getSessionToken();
      /*
        This is where you will need to submit the form data to your app server to edit the plan.
        You'll need to use the `token` value to authenticate this request on your app server.
        Upon completion, call done() to trigger a reload of the resource page and close() to close the modal.
      */
      done();
      close();
    },
  });

  setSecondaryAction({
    content: 'Cancel',
    onAction: () => close(),
  });

  const rootStack = root.createComponent(Stack, {vertical: true});
  root.appendChild(rootStack);

  const textElement = root.createComponent(Text);
  textElement.appendChild(
    root.createText(`Edit subscription plan for {Product id ${data.productId}}`)
  );
  rootStack.appendChild(textElement);

  const planTitleField = root.createComponent(TextField, {
    label: 'Plan title',
    value: 'Current Plan',
    onAfterChange(value) {
      planTitleField.updateProps({
        value,
      });
    },
  });
  rootStack.appendChild(planTitleField);

  const stack = root.createComponent(Stack);
  rootStack.appendChild(stack);

  const deliveryFrequencyField = root.createComponent(TextField, {
    type: 'number',
    label: 'Delivery frequency (in weeks)',
    value: '1',
    onAfterChange(value) {
      deliveryFrequencyField.updateProps({
        value,
      });
    },
  });
  stack.appendChild(deliveryFrequencyField);

  const percentageOffField = root.createComponent(TextField, {
    type: 'number',
    label: 'Percentage off (%)',
    value: '10',
    onAfterChange(value) {
      percentageOffField.updateProps({
        value,
      });
    },
  });
  stack.appendChild(percentageOffField);

  root.mount();
}

render(ExtensionPoint.SubscriptionManagementAdd, Add);
render(ExtensionPoint.SubscriptionManagementCreate, Create);
render(ExtensionPoint.SubscriptionManagementRemove, Remove);
render(ExtensionPoint.SubscriptionManagementEdit, Edit);
